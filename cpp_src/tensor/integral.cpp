#include "integral.h"

#include <sstream>
#include <stdexcept>

std::tuple<py::array_t<double>, py::array_t<double>> compress_h1e_h2e(
    const py::array_t<double> &h1e, const py::array_t<double> &h2e,
    const int sorb) {
  int pair = sorb * (sorb - 1) / 2;
  std::vector<double> int1e(sorb * sorb, 0.0);
  std::vector<double> int2e((pair * (pair + 1)) / 2, 0.0);

  auto h1e_unchecked = h1e.unchecked<2>();  // View h1e as a 2D array
  auto h2e_unchecked = h2e.unchecked<4>();  // View h2e as a 4D array

  // compress h1e
  for (int i = 0; i < sorb; ++i) {
    for (int j = 0; j < sorb; ++j) {
      int1e[i * sorb + j] = h1e_unchecked(i, j);
    }
  }

  // compress h2e
  auto _tow_body = [&int2e](int i, int j, int k, int l, double value) {
    if (i == j || k == l) return;
    int ij = (i * (i - 1)) / 2 + j;
    int kl = (k * (k - 1)) / 2 + l;
    if (i <= j) ij = (j * (j - 1)) / 2 + i;
    if (k <= l) kl = (l * (l - 1)) / 2 + k;

    double sgn = 1.0;
    if (i <= j) sgn = -sgn;
    if (k <= l) sgn = -sgn;

    if (ij >= kl) {
      int ijkl = (ij * (ij + 1)) / 2 + kl;
      int2e[ijkl] = sgn * value;
    } else {
      int ijkl = (kl * (kl + 1)) / 2 + ij;
      int2e[ijkl] = sgn * value;
    }
  };

  // Compress values from h2e to int2e using the helper lambda
  for (int i = 0; i < sorb; ++i) {
    for (int j = 0; j < sorb; ++j) {
      for (int k = 0; k < sorb; ++k) {
        for (int l = 0; l < sorb; ++l) {
          _tow_body(i, j, k, l, h2e_unchecked(i, j, k, l));
        }
      }
    }
  }

  // Create pybind11 arrays from std::vector
  py::array_t<double> int1e_array(sorb * sorb, int1e.data());
  py::array_t<double> int2e_array((pair * (pair + 1)) / 2, int2e.data());

  return std::make_tuple(int1e_array, int2e_array);
}

std::tuple<py::array_t<double>, py::array_t<double>> decompress_h1e_h2e(
    const py::array_t<double> &h1e, const py::array_t<double> &h2e,
    const int sorb) {
  // generated by chatgpt
  int pair = sorb * (sorb - 1) / 2;

  if (h1e.size() != sorb * sorb) {
    std::ostringstream oss;
    oss << "h1e array size is incorrect: expected " << sorb * sorb << ", got "
        << h1e.size();
    throw std::invalid_argument(oss.str());
  }
  if (h2e.size() != (pair * (pair + 1)) / 2) {
    std::ostringstream oss;
    oss << "h2e array size is incorrect: expected " << (pair * (pair + 1)) / 2
        << ", got " << h2e.size();
    throw std::invalid_argument(oss.str());
  }

  py::array_t<double> int1e({sorb, sorb});
  py::array_t<double> int2e({sorb, sorb, sorb, sorb});

  auto int1e_mutable = int1e.mutable_unchecked<2>();
  auto int2e_mutable = int2e.mutable_unchecked<4>();
  auto h1e_unchecked = h1e.unchecked<1>();
  auto h2e_unchecked = h2e.unchecked<1>();

  for (int i = 0; i < sorb; ++i) {
    for (int j = 0; j < sorb; ++j) {
      int1e_mutable(i, j) = h1e_unchecked(i * sorb + j);
    }
  }

  auto _tow_body = [&int2e_mutable, &h2e_unchecked](int i, int j, int k, int l,
                                                    int sorb) {
    if (i == j || k == l) return;

    int ij = (i > j) ? (i * (i - 1)) / 2 + j : (j * (j - 1)) / 2 + i;
    int kl = (k > l) ? (k * (k - 1)) / 2 + l : (l * (l - 1)) / 2 + k;

    double sgn = 1.0;
    sgn = (i > j) ? sgn : -sgn;
    sgn = (k > l) ? sgn : -sgn;

    if (ij >= kl) {
      int ijkl = (ij * (ij + 1)) / 2 + kl;
      int2e_mutable(i, j, k, l) = h2e_unchecked(ijkl) * sgn;
    } else {
      int ijkl = (kl * (kl + 1)) / 2 + ij;
      int2e_mutable(i, j, k, l) = h2e_unchecked(ijkl) * sgn;
    }
  };

  for (int i = 0; i < sorb; ++i) {
    for (int j = 0; j < sorb; ++j) {
      for (int k = 0; k < sorb; ++k) {
        for (int l = 0; l < sorb; ++l) {
          _tow_body(i, j, k, l, sorb);
        }
      }
    }
  }

  return std::make_tuple(int1e, int2e);
}